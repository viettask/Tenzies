{"version":3,"sources":["components/Die/index.jsx","App.js","index.js"],"names":["Die","props","styles","backgroundColor","isHeld","className","style","onClick","holdDice","value","App","React","useState","allNewDice","dice","setDice","tenzies","setTenzies","generateNewDie","Math","ceil","random","id","nanoid","newDice","i","push","useEffect","allHeld","every","die","firstValue","allSameValue","console","log","diceElements","map","oldDice","ReactDOM","render","document","getElementById"],"mappings":"sQAae,SAASA,EAAIC,GACxB,IAAMC,EAAS,CACXC,gBAAiBF,EAAMG,OAAS,UAAY,SAGhD,OACI,qBACIC,UAAU,WACVC,MAAOJ,EACPK,QAASN,EAAMO,SAHnB,SAII,oBAAIH,UAAU,UAAd,SAAyBJ,EAAMQ,U,WCT5B,SAASC,IAoBpB,MAAwBC,IAAMC,SAASC,KAAvC,mBAAOC,EAAP,KAAaC,EAAb,KASA,EAA8BJ,IAAMC,UAAS,GAA7C,mBAAOI,EAAP,KAAgBC,EAAhB,KAaA,SAASC,IACL,MAAO,CACHT,MAAOU,KAAKC,KAAqB,EAAhBD,KAAKE,UACtBjB,QAAQ,EACRkB,GAAIC,eAIZ,SAASV,IAEL,IADA,IAAMW,EAAU,GACPC,EAAI,EAAGA,EAAI,GAAIA,IACpBD,EAAQE,KAAKR,KAGjB,OAAOM,EAzBXb,IAAMgB,WAAU,WACZ,IAAMC,EAAUd,EAAKe,OAAM,SAAAC,GAAG,OAAIA,EAAI1B,UAChC2B,EAAajB,EAAK,GAAGL,MACrBuB,EAAelB,EAAKe,OAAM,SAAAC,GAAG,OAAIA,EAAIrB,QAAUsB,KACjDH,GAAWI,IACXf,GAAW,GACXgB,QAAQC,IAAI,eAEjB,CAACpB,IAqBJ,IAAMqB,EAAerB,EAAKsB,KAAI,SAAAN,GAAG,OAC7B,cAAC9B,EAAD,CAAkBS,MAAOqB,EAAIrB,MAAOL,OAAQ0B,EAAI1B,OAAQI,SAAU,kBAmBpDc,EAnBmEQ,EAAIR,QAqBrFP,GAAQ,SAAAsB,GAAO,OAAIA,EAAQD,KAAI,SAAAN,GAC3B,OAAOA,EAAIR,KAAOA,EAAX,2BACEQ,GADF,IACO1B,QAAS0B,EAAI1B,SACvB0B,QALZ,IAAkBR,IAnBJQ,EAAIR,OA8BlB,OAFAW,QAAQC,IAAIC,GAGR,iCACI,oBAAI9B,UAAU,QAAd,qBACA,mBAAGA,UAAU,eAAb,+GACA,qBAAKA,UAAU,iBAAf,SACK8B,IAGL,wBAAQ9B,UAAU,YAAYE,QAhCtC,WACSS,GAODC,GAAW,GACXF,EAAQF,MAPRE,GAAQ,SAAAsB,GAAO,OAAIA,EAAQD,KAAI,SAAAN,GAC3B,OAAOA,EAAI1B,OACP0B,EACAZ,WA2BR,SACKF,EAAU,WAAa,YC3GxCsB,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.5582b445.chunk.js","sourcesContent":["import React from 'react';\r\n//import PropTypes from 'prop-types';\r\nimport './styles.scss';\r\n\r\n// ColorBox.propTypes = {\r\n//     color: PropTypes.string.isRequired,\r\n//     rounded: PropTypes.bool\r\n// };\r\n\r\n// ColorBox.defaultProps = {\r\n//     rounded: true\r\n// };\r\n\r\nexport default function Die(props) {\r\n    const styles = {\r\n        backgroundColor: props.isHeld ? \"#59E391\" : \"white\"\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"die-face\"\r\n            style={styles}\r\n            onClick={props.holdDice}>\r\n            <h2 className=\"die-num\">{props.value}</h2>\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport Die from \"./components/Die\";\nimport React from \"react\"\nimport { nanoid } from \"nanoid\"\n\n/**\n * Challenge:\n * \n * Write a function (allNewDice) that returns an array \n * of 10 random numbers between 1-6 inclusive.\n * \n * Log the array of numbers to the console for now\n */\n\nexport default function App() {\n\n    /**\n * Challenge: Update the array of numbers in state to be\n * an array of objects instead. Each object should look like:\n * { value: <random number>, isHeld: false }\n * \n * Making this change will break parts of our code, so make\n * sure to update things so we're back to a working state\n */\n\n    /**\n * Challenge: Add conditional styling to the Die component\n * so that if it's held (isHeld === true), its background color\n * changes to a light green (#59E391)\n * \n * Remember: currently the Die component has no way of knowing\n * if it's \"held\" or not.\n */\n\n    const [dice, setDice] = React.useState(allNewDice())\n\n    /**\n     * Challenge:\n     * 1. Add new state called `tenzies`, default to false. It\n     *    represents whether the user has won the game yet or not.\n     * 2. Add an effect that runs every time the `dice` state array \n     *    changes. For now, just console.log(\"Dice state changed\").\n     */\n    const [tenzies, setTenzies] = React.useState(false)\n\n    React.useEffect(() => {\n        const allHeld = dice.every(die => die.isHeld)\n        const firstValue = dice[0].value\n        const allSameValue = dice.every(die => die.value === firstValue)\n        if (allHeld && allSameValue) {\n            setTenzies(true)\n            console.log(\"You won!\")\n        }\n    }, [dice])\n\n\n    function generateNewDie() {\n        return {\n            value: Math.ceil(Math.random() * 6),\n            isHeld: false,\n            id: nanoid()\n        }\n    }\n\n    function allNewDice() {\n        const newDice = []\n        for (let i = 0; i < 10; i++) {\n            newDice.push(generateNewDie())\n\n        }\n        return newDice\n    }\n\n    //console.log(allNewDice())\n    const diceElements = dice.map(die => (\n        <Die key={die.id} value={die.value} isHeld={die.isHeld} holdDice={() => holdDice(die.id)} />))\n\n    // function rollDice() {\n    //     setDice(allNewDice())\n    // }\n\n    function rollDice() {\n        if (!tenzies) {\n            setDice(oldDice => oldDice.map(die => {\n                return die.isHeld ?\n                    die :\n                    generateNewDie()\n            }))\n        } else {\n            setTenzies(false)\n            setDice(allNewDice())\n        }\n    }\n\n    function holdDice(id) {\n        // console.log(id)\n        setDice(oldDice => oldDice.map(die => {\n            return die.id === id ?\n                { ...die, isHeld: !die.isHeld } :\n                die\n        }))\n    }\n\n    console.log(diceElements)\n\n    return (\n        <main>\n            <h1 className=\"title\">Tenzies</h1>\n            <p className=\"instructions\">Roll until all dice are the same. Click each die to freeze it at its current value between rolls.</p>\n            <div className=\"dice-container\">\n                {diceElements}\n            </div>\n\n            <button className=\"roll-dice\" onClick={rollDice}>\n                {tenzies ? \"New Game\" : \"Roll\"}\n            </button>\n        </main>\n    );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StrictMode } from \"react\";\n\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}